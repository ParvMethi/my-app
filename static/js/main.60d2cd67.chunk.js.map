{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","placeholder","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.60d2cd67.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n//import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n       \r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n        {/*<Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>*/}\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n                {/*<Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>*/}\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            {/*<li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n            </li>*/}\r\n            \r\n            </ul>\r\n            \r\n\r\n            {/*<form className=\"d-flex\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            \r\n            \r\n\r\n            <div className={`form-check form-switch text-${props.mode ==='light'?'dark':'light'}`} >\r\n                <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n            </div>\r\n\r\n        </div>\r\n        </div>\r\n    </nav>\r\n\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {title: PropTypes.string.isRequired,\r\n                    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About text here'\r\n};","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        //console.log(\"Uppercase was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = ()=>{\r\n        //console.log(\"Lowercase was clicked\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = ()=>{\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text Cleared\", \"success\");\r\n    }\r\n\r\n    const handleCopy = ()=>{\r\n        //console.log(\"Copied\");\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to Clipboard\", \"success\");\r\n    }\r\n\r\n    const handleSpace = ()=>{\r\n        \r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra Space Removed\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        //console.log(\"On change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n    \r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode ==='dark'?'white':'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value = {text} onChange={handleOnChange} style={{backgroundColor: \r\n            props.mode ==='dark'?'grey':'white',color:  props.mode ==='dark'?'white':'black'}} id=\"myBox\" rows=\"8\"  \r\n            placeholder =\"Enter Text Here\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-success mx-1\" onClick={handleUpClick}> UPPER CASE </button>\r\n            <button className=\"btn btn-success mx-1\" onClick={handleLoClick}> lower case </button>\r\n            <button className=\"btn btn-success mx-1\" onClick={handleCopy}> Copy to Clipboard </button>\r\n            <button className=\"btn btn-success mx-1\" onClick={handleSpace}> Remove Extra Spaces </button>\r\n            <button className=\"btn btn-success mx-1\" onClick={handleClearClick}> Clear </button>\r\n            \r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode ==='dark'?'white':'black'}}>\r\n            <h1>Your text summary</h1>\r\n            <p>Word Count : {text.split(\" \").length} | Character Count : {text.length} </p>\r\n            <p>Reading Time : {0.008 * text.split(\" \").length} minutes</p>\r\n            <h2>Preview:</h2>\r\n            <p>{text.length>0?text:\"Enter something in the textbox above to preview it here.\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n         \r\n         props.alert && <div className=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n            \r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport React, { useState } from 'react'\n//import About from './components/About';\n\n//import {\n//  BrowserRouter as Router,\n//  Routes,\n//  Route\n//} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');//Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message,type)=>{\n      setAlert({\n        msg: message,\n        type: type,\n      })\n\n      setTimeout(()=>{\n          setAlert(null);\n      },1500)\n  }\n  \n  const toggleMode = ()=>{\n    if(mode === 'light'){\n        setMode('dark');\n        document.body.style.backgroundColor = 'grey';\n        showAlert(\"Dark mode has been enabled\", \"success\");\n    }\n    else{\n        setMode('light');\n        showAlert(\"Light mode has been enabled\", \"success\");\n        document.body.style.backgroundColor = 'white';\n       \n   }\n  \n  }\n\n  return (\n    <>\n    {/*<Router>*/}\n    <Navbar title=\"TextUtils\" aboutText=\"AboutUs\" mode={mode} toggleMode={toggleMode}/>\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n    {/*<Routes>*/}\n        {/*<Route exact path=\"/about\"\n          element={<About/>}>\n        </Route>*/}\n          {/*<Route exact path=\"/\"element=*/}\n          <TextForm showAlert={showAlert} heading=\"Enter the text below to analyze\" mode={mode}/>\n          {/*</Route>*/}\n    {/*</Routes>*/}\n    </div>\n    {/*</Router>*/}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}